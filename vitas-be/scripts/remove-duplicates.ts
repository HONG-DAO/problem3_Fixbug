#!/usr/bin/env ts-node

import { NestFactory } from '@nestjs/core';
import { AppModule } from '../src/app.module.js';
import { MarketDataService } from '../src/infrastructure/database/market-data.service.js';
import { getCollectionName, Timeframe } from '../src/common/constants/timeframe.constants.js';

/**
 * Script ƒë·ªÉ x√≥a duplicate data trong database
 * Ch·ªâ gi·ªØ l·∫°i b·∫£n ghi ƒë·∫ßu ti√™n, x√≥a c√°c b·∫£n ghi tr√πng l·∫∑p
 */
class DuplicateRemover {
  private marketDataService: MarketDataService;

  constructor(marketDataService: MarketDataService) {
    this.marketDataService = marketDataService;
  }

  /**
   * X√≥a duplicate data cho m·ªôt timeframe c·ª• th·ªÉ
   * ‚ö†Ô∏è H√ÄM N√ÄY ƒê√É ƒê∆Ø·ª¢C COMMENT ƒê·ªÇ ƒê·∫¢M B·∫¢O AN TO√ÄN
   * Ch·ªâ s·ª≠ d·ª•ng khi th·ª±c s·ª± c·∫ßn thi·∫øt v√† ƒë√£ backup database
   */
  /*
  async removeDuplicatesForTimeframe(timeframe: string): Promise<{
    removed: number;
    kept: number;
    duplicates: Array<{ticker: string, timestamp: Date, count: number}>
  }> {
    const model = (this.marketDataService as any).getModel(timeframe);
    const collectionName = getCollectionName(timeframe);
    
    console.log(`\nüîç Ki·ªÉm tra duplicate trong ${collectionName}...`);

    // T√¨m t·∫•t c·∫£ duplicate groups
    const duplicateGroups = await model.aggregate([
      {
        $group: {
          _id: {
            ticker: '$ticker',
            timestamp: '$timestamp'
          },
          count: { $sum: 1 },
          ids: { $push: '$_id' }
        }
      },
      {
        $match: {
          count: { $gt: 1 }
        }
      }
    ]);

    if (duplicateGroups.length === 0) {
      console.log(`   ‚úÖ Kh√¥ng c√≥ duplicate trong ${collectionName}`);
      return { removed: 0, kept: 0, duplicates: [] };
    }

    console.log(`   ‚ùå T√¨m th·∫•y ${duplicateGroups.length} nh√≥m duplicate`);

    let totalRemoved = 0;
    let totalKept = 0;
    const duplicates: Array<{ticker: string, timestamp: Date, count: number}> = [];

    for (const group of duplicateGroups) {
      const { ticker, timestamp } = group._id;
      const count = group.count;
      const ids = group.ids;

      // S·∫Øp x·∫øp IDs ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª± nh·∫•t qu√°n
      const sortedIds = ids.sort();
      const toKeep = sortedIds[0]; // Gi·ªØ l·∫°i b·∫£n ghi ƒë·∫ßu ti√™n
      const toRemove = sortedIds.slice(1); // X√≥a c√°c b·∫£n ghi c√≤n l·∫°i

      // Th·ª±c hi·ªán x√≥a
      const deleteResult = await model.deleteMany({
        _id: { $in: toRemove }
      });

      totalRemoved += deleteResult.deletedCount;
      totalKept += 1;

      duplicates.push({
        ticker,
        timestamp,
        count
      });

      console.log(`   üóëÔ∏è X√≥a ${deleteResult.deletedCount} b·∫£n ghi c·ªßa ${ticker} t·∫°i ${timestamp.toISOString()}`);
    }

    console.log(`   ‚úÖ Ho√†n th√†nh: X√≥a ${totalRemoved}, gi·ªØ l·∫°i ${totalKept}`);

    return {
      removed: totalRemoved,
      kept: totalKept,
      duplicates
    };
  }
  */

  /**
   * X√≥a duplicate data cho t·∫•t c·∫£ timeframes
   * ‚ö†Ô∏è H√ÄM N√ÄY ƒê√É ƒê∆Ø·ª¢C COMMENT ƒê·ªÇ ƒê·∫¢M B·∫¢O AN TO√ÄN
   * Ch·ªâ s·ª≠ d·ª•ng khi th·ª±c s·ª± c·∫ßn thi·∫øt v√† ƒë√£ backup database
   */
  /*
  async removeAllDuplicates(): Promise<void> {
    const timeframes = Object.values(Timeframe);
    let totalRemoved = 0;
    let totalKept = 0;

    console.log('üöÄ B·∫Øt ƒë·∫ßu x√≥a duplicate data...\n');

    for (const timeframe of timeframes) {
      try {
        const result = await this.removeDuplicatesForTimeframe(timeframe);
        totalRemoved += result.removed;
        totalKept += result.kept;
      } catch (error) {
        console.error(`‚ùå L·ªói khi x√≥a duplicate cho ${timeframe}:`, error.message);
      }
    }

    console.log('\nüìä T·ªîNG K·∫æT:');
    console.log(`   ƒê√£ x√≥a: ${totalRemoved} b·∫£n ghi duplicate`);
    console.log(`   ƒê√£ gi·ªØ: ${totalKept} b·∫£n ghi`);
  }
  */

  /**
   * Ki·ªÉm tra duplicate tr∆∞·ªõc khi x√≥a (dry run)
   */
  async checkDuplicates(): Promise<void> {
    const timeframes = Object.values(Timeframe);
    let totalDuplicates = 0;

    console.log('üîç Ki·ªÉm tra duplicate data...\n');

    for (const timeframe of timeframes) {
      const model = (this.marketDataService as any).getModel(timeframe);
      const collectionName = getCollectionName(timeframe);
      
      try {
        const duplicateGroups = await model.aggregate([
          {
            $group: {
              _id: {
                ticker: '$ticker',
                timestamp: '$timestamp'
              },
              count: { $sum: 1 }
            }
          },
          {
            $match: {
              count: { $gt: 1 }
            }
          }
        ]);

        if (duplicateGroups.length > 0) {
          console.log(`üìä ${collectionName}: ${duplicateGroups.length} nh√≥m duplicate`);
          duplicateGroups.forEach(group => {
            console.log(`   - ${group._id.ticker} t·∫°i ${group._id.timestamp.toISOString()}: ${group.count} b·∫£n ghi`);
            totalDuplicates += group.count - 1; // Tr·ª´ 1 v√¨ gi·ªØ l·∫°i 1 b·∫£n ghi
          });
        } else {
          console.log(`‚úÖ ${collectionName}: Kh√¥ng c√≥ duplicate`);
        }

      } catch (error) {
        console.error(`‚ùå L·ªói khi ki·ªÉm tra ${collectionName}:`, error.message);
      }
    }

    console.log(`\nüìà T·ªïng s·ªë b·∫£n ghi c√≥ th·ªÉ x√≥a: ${totalDuplicates}`);
  }
}

async function main() {
  console.log('üöÄ VITAS Duplicate Data Remover');
  console.log('================================\n');

  try {
    // Kh·ªüi t·∫°o NestJS application
    const app = await NestFactory.createApplicationContext(AppModule);
    const marketDataService = app.get(MarketDataService);

    const remover = new DuplicateRemover(marketDataService);

    // L·∫•y arguments t·ª´ command line
    const args = process.argv.slice(2);
    const action = args[0] || 'check';

    switch (action) {
      case 'check':
        await remover.checkDuplicates();
        break;

      case 'remove':
        console.log('‚ö†Ô∏è  C·∫¢NH B√ÅO: Ch·ª©c nƒÉng x√≥a ƒë√£ ƒë∆∞·ª£c comment ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n!');
        console.log('   ƒê·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng x√≥a, h√£y uncomment c√°c h√†m trong script.');
        console.log('   Ho·∫∑c s·ª≠ d·ª•ng script check-duplicates.ts v·ªõi --execute flag.');
        break;

      default:
        console.log('‚ùå Action kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng: check ho·∫∑c remove');
        console.log('\nC√°ch s·ª≠ d·ª•ng:');
        console.log('  npm run remove-duplicates check     # Ki·ªÉm tra duplicate');
        console.log('  npm run remove-duplicates remove    # X√≥a duplicate');
        break;
    }

    await app.close();
    console.log('\n‚úÖ Ho√†n th√†nh!');

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
    process.exit(1);
  }
}

// Ch·∫°y script
if (require.main === module) {
  main();
}

export { DuplicateRemover };
